group = comparison,
linetype = comparison,
colour = comparison),
size=0.75) +
labs(title="Large Effects") +
coord_cartesian(ylim = c(0,101)) +
ylab("Percent Agreement") +
xlab("log(N)") +
cleanup +
geom_point(data=agree_large,
aes(x = N,
y = percent,
shape = comparison),
size = 4) +
scale_linetype_manual(name = "Comparison",
labels = c(".05", ".005"),
values=c("solid","solid")) +
scale_color_manual(name = "Comparison",
labels = c(".05", ".005"),
values = c("gray50","gray50")) +
scale_shape_manual(name = "Comparison",
labels = c(".05", ".005"),
values = c(3, 4))
agree_medium = subset(agreelong, effect == "Medium")
w2 = ggplot(agree_medium) +
geom_line(aes(x=N,
y=percent,
group = comparison,
linetype = comparison,
colour = comparison),
size=0.75) +
labs(title="Medium Effects") +
coord_cartesian(ylim = c(0,101)) +
ylab("Percent Agreement") +
xlab("log(N)") +
cleanup +
geom_point(data=agree_medium,
aes(x = N,
y = percent,
shape = comparison),
size = 4) +
scale_linetype_manual(name = "Comparison",
labels = c(".05", ".005"),
values=c("solid","solid")) +
scale_color_manual(name = "Comparison",
labels = c(".05", ".005"),
values = c("gray50","gray50")) +
scale_shape_manual(name = "Comparison",
labels = c(".05", ".005"),
values = c(3, 4))
agree_small = subset(agreelong, effect == "Small")
w3 = ggplot(agree_small) +
geom_line(aes(x=N,
y=percent,
group = comparison,
linetype = comparison,
colour = comparison),
size=0.75) +
labs(title="Small Effects") +
coord_cartesian(ylim = c(0,101)) +
ylab("Percent Agreement") +
xlab("log(N)") +
cleanup +
geom_point(data=agree_small,
aes(x = N,
y = percent,
shape = comparison),
size = 4) +
scale_linetype_manual(name = "Comparison",
labels = c(".05", ".005"),
values=c("solid","solid")) +
scale_color_manual(name = "Comparison",
labels = c(".05", ".005"),
values = c("gray50","gray50")) +
scale_shape_manual(name = "Comparison",
labels = c(".05", ".005"),
values = c(3, 4))
agree_none = subset(agreelong, effect == "None")
w4 = ggplot(agree_none) +
geom_line(aes(x=N,
y=percent,
group = comparison,
linetype = comparison,
colour = comparison),
size=0.75) +
labs(title="Negligible Effects") +
coord_cartesian(ylim = c(0,101)) +
ylab("Percent Agreement") +
xlab("log(N)") +
cleanup +
geom_point(data=agree_none,
aes(x = N,
y = percent,
shape = comparison),
size = 4) +
scale_linetype_manual(name = "Comparison",
labels = c(".05", ".005"),
values=c("solid","solid")) +
scale_color_manual(name = "Comparison",
labels = c(".05", ".005"),
values = c("gray50","gray50")) +
scale_shape_manual(name = "Comparison",
labels = c(".05", ".005"),
values = c(3, 4))
####put the graphs together####
legend = get_legend(w1)
wrow <- plot_grid( w4 + theme(legend.position="none"),
w3 + theme(legend.position="none"),
w2 + theme(legend.position="none"),
w1 + theme(legend.position="none"),
legend,
hjust = -1,
nrow = 3
)
wrow
w1 + theme(legend.position=c(.6,.25))
View(agreelong)
ln(6.9)
exp(6.9)
shiny::runApp('OneDrive - Missouri State University/RESEARCH/2 projects/Alt NHST/paper')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/Alt NHST/paper')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/Alt NHST/paper')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/Alt NHST/paper')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/Alt NHST/paper')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/Alt NHST/paper')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/Alt NHST/paper')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/Alt NHST/paper')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/Alt NHST/paper')
setwd("~/OneDrive - Missouri State University/RESEARCH/2 projects/Alt NHST/paper")
#load graph data
Graph_05 = read.csv("Graph_data.05.csv")
Graph_005 = read.csv("Graph_data.005.csv")
Graph_data = cbind(Graph_05, Graph_005[ , 4:5])
colnames(Graph_data) = c("Effect","Significance", "N", "Parametric.05", "Non.Parametric.05", "Bayes", "OOM", "Parametric.005", "Non.Parametric.005")
##delete duplicate NS values, they don't change
Graph_data[ Graph_data$Significance == "Non", "Parametric.005" ] = NA
Graph_data[ Graph_data$Significance == "Non", "Non.Parametric.005" ] = NA
##drop NP because results are same as P, all results can been found online if you are interested
Graph_data = Graph_data[ , -c(5,9)]
##melt the data
long_graph = melt(Graph_data,
id = c("Effect","Significance","N"))
colnames(long_graph) = c("Effect","Significance", "N","Analysis","value")
long_graph = na.omit(long_graph)
long_graph$Analysis = factor(long_graph$Analysis,
levels = c("Parametric.05",
"Parametric.005",
"Bayes","OOM"),
labels = c("NHST .05",
"NHST .005",
"Bayes Factors","OOM"))
input = list()
input$sizeselect = "None"
graphdata = subset(long_graph, Significance=="Sig" && Effect == input$sizeselect)
View(graphdata)
graphdata = subset(long_graph, Significance=="Sig" & Effect == input$sizeselect)
View(graphdata)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
setwd("~/OneDrive - Missouri State University/RESEARCH/2 projects/Alt NHST/paper")
#load graph data
Graph_05 = read.csv("Graph_data.05.csv")
table(Graph_05$N)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?round
log(10)
round(log(10),1)
?sliderInput
runApp()
runApp()
setwd("~/OneDrive - Missouri State University/RESEARCH/2 projects/Alt NHST/paper")
nsGraph_05 = read.csv("Graph_data.05.csv")
nsGraph_005 = read.csv("Graph_data.005.csv")
nsGraph_data = cbind(nsGraph_05, nsGraph_005[ , 4:5])
colnames(nsGraph_data) = c("Effect","Significance", "N", "Parametric.05", "Non.Parametric.05", "Bayes", "OOM", "Parametric.005", "Non.Parametric.005")
##delete duplicate NS values, they don't change
nsGraph_data[ nsGraph_data$Significance == "Non", "Parametric.005" ] = NA
nsGraph_data[ nsGraph_data$Significance == "Non", "Non.Parametric.005" ] = NA
##drop NP because results are same as P, all results can been found online if you are interested
nsGraph_data = nsGraph_data[ , -c(5,9)]
##melt the data
nslong_graph = melt(nsGraph_data,
id = c("Effect","Significance","N"))
library(reshape)
##melt the data
nslong_graph = melt(nsGraph_data,
id = c("Effect","Significance","N"))
colnames(nslong_graph) = c("Effect","Significance", "N","Analysis","value")
nslong_graph = na.omit(nslong_graph)
nslong_graph$Analysis = factor(nslong_graph$Analysis,
levels = c("Parametric.05",
"Parametric.005",
"Bayes","OOM"),
labels = c("NHST .05",
"NHST .005",
"Bayes Factors","OOM"))
View(nslong_graph)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
oomtable = matrix(NA, nrow = 3, ncol = 4)
apa_table(oomtable)
library(apa_tab)
library(papaja)
apa_table(oomtable)
?papaja
library(plotly)
p <- plot_ly(mtcars, x = ~wt, y = ~hp, z = ~qsec, color = ~am, colors = c('#BF382A', '#0C4B8E')) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Weight'),
yaxis = list(title = 'Gross horsepower'),
zaxis = list(title = '1/4 mile time')))
p
setwd("~/OneDrive - Missouri State University/RESEARCH/2 projects/Alt NHST/paper")
master = read.csv("overall_sims.csv")
names(master)
plot_ly(master,
x = ~overallBF,
y = ~oompcc,
z = ~omniP,
color = ~N)
plot_ly(subset(master, overallBF < 1000),
x = ~overallBF,
y = ~oompcc,
z = ~omniP,
color = ~N)
original = plot_ly(master,
x = ~overallBF,
y = ~oompcc,
z = ~omniP,
color = ~N)
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Bayes Factors'),
yaxis = list(title = 'OOM PCC'),
zaxis = list(title = 'p-Value')))
plot_ly(subset(master, overallBF < 1000),
x = ~overallBF,
y = ~oompcc,
z = ~omniP,
color = ~N)
p = plot_ly(master,
x = ~overallBF,
y = ~oompcc,
z = ~omniP,
color = ~N)
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Bayes Factors'),
yaxis = list(title = 'OOM PCC'),
zaxis = list(title = 'p-Value')))
p = plot_ly(master,
x = ~overallBF,
y = ~oompcc,
z = ~omniP,
color = ~N) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Bayes Factors'),
yaxis = list(title = 'OOM PCC'),
zaxis = list(title = 'p-Value')))
overall = plot_ly(master,
x = ~overallBF,
y = ~oompcc,
z = ~omniP,
color = ~N) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Bayes Factors'),
yaxis = list(title = 'OOM PCC'),
zaxis = list(title = 'p-Value')))
overall
BFsmaller = plot_ly(subset(master, overallBF < 1000),
x = ~overallBF,
y = ~oompcc,
z = ~omniP,
color = ~N) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Bayes Factors'),
yaxis = list(title = 'OOM PCC'),
zaxis = list(title = 'p-Value')))
BFsmaller
shiny::runApp()
?shiny
runApp()
runApp()
runApp()
runApp()
ls()
runApp()
log(43895894323)
log(.438943)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
####load the data for comparison graphs####
overalleffects = read.csv("overall_sims_shiny.csv")
table(overalleffects$stdev)
overalleffects$stdev = factor(overalleffects$stdev,
labels = c(.1, .5, 3, 11.5),
levels = c("Large", "Medium", "Small", "None"))
summary(overalleffects)
overalleffects$stdev = factor(as.character(overalleffects$stdev),
labels = c(.1, .5, 3, 11.5),
levels = c("Large", "Medium", "Small", "None"))
####load the data for comparison graphs####
overalleffects = read.csv("overall_sims_shiny.csv")
overalleffects$stdev = factor(as.character(overalleffects$stdev),
labels = c(.1, .5, 3, 11.5),
levels = c("Large", "Medium", "Small", "None"))
summary(overalleffects)
####load the data for comparison graphs####
overalleffects = read.csv("overall_sims_shiny.csv")
####load the data for comparison graphs####
overalleffects = read.csv("overall_sims_shiny.csv")
overalleffects$stdev = factor(as.character(overalleffects$stdev),
labels = c(0.1, 0.5, 3, 11.5),
levels = c("Large", "Medium", "Small", "None"))
summary(overalleffects)
####load the data for comparison graphs####
overalleffects = read.csv("overall_sims_shiny.csv")
overalleffects$stdev = factor(overalleffects$stdev))
overalleffects$stdev = factor(overalleffects$stdev)
####load the data for comparison graphs####
overalleffects = read.csv("overall_sims_shiny.csv")
overalleffects$stdev = factor(overalleffects$stdev)
summary(overalleffects)
overalleffects$stdev = factor(overalleffects$stdev,
labels = c(0.1, 0.5, 3, 11.5),
levels = c("Large", "Medium", "Small", "None"))
summary(overalleffects)
####load the data for comparison graphs####
overalleffects = read.csv("overall_sims_shiny.csv")
overalleffects$stdev = factor(overalleffects$stdev)
levels(overalleffects)
table(overalleffects)
levels(overalleffects$stdev)
overalleffects$stdev = factor(overalleffects$stdev)
overalleffects$stdev = factor(overalleffects$stdev,
labels = c("0.1", "0.5", "3", "11.5"),
levels = c("Large", "Medium", "Small", "None"))
summary(overalleffects)
####load the data for comparison graphs####
overalleffects = read.csv("overall_sims_shiny.csv")
overalleffects$stdev = factor(overalleffects$stdev)
####load the data for comparison graphs####
overalleffects = read.csv("overall_sims_shiny.csv")
overalleffects$stdev = factor(overalleffects$stdev,
labels = c("0.1", "0.5", "3", "11.5"),
levels = c("Large", "Medium", "Small", "None"))
summary(overalleffects$stdev)
####load the data for comparison graphs####
overalleffects = read.csv("overall_sims_shiny.csv")
summary(overalleffects)
as.character(overalleffects$stdev)
overalleffects$stdev = factor(as.character(overalleffects$stdev),
labels = c("0.1", "0.5", "3", "11.5"),
levels = c("Large", "Medium", "Small", "None"))
summary(overalleffects$stdev)
####load the data for comparison graphs####
overalleffects = read.csv("overall_sims_shiny.csv")
overalleffects$stdev = cut(overalleffects$stdev, breaks = c(.1, .5, 3, 11.5))
summary(overalleffects)
####load the data for comparison graphs####
overalleffects = read.csv("overall_sims_shiny.csv")
factor(overalleffects$stdev)
overalleffects$stdev = factor(overalleffects$stdev)
summary(overalleffects)
####load the data for comparison graphs####
overalleffects = read.csv("overall_sims_shiny.csv")
overalleffects$stdev = factor(overalleffects$stdev,
labels = c("Large", "Medium", "Small", "None"))
summary(overalleffects)
runApp()
input = list()
input$bfrange = c(0,1000)
input$prange = c(0,1)
input$pccrange = c(0,1)
input$sizeselect == "Large"
input$sizeselect = "Large"
overallgraph3d = subset(overalleffects,
overallBF >= input$bfrange[1] & overallBF <= input$bfrange[2] &
omniP >= input$prange[1] & omniP <= input$prange[2] &
oompcc >= input$pccrange[1] & oompcc <= input$pccrange[2] &
stdev == input$sizeselect)
View(overallgraph3d)
input$bfrange = c(1,100000000000)
overallgraph3d = subset(overalleffects,
overallBF >= input$bfrange[1] & overallBF <= input$bfrange[2] &
omniP >= input$prange[1] & omniP <= input$prange[2] &
oompcc >= input$pccrange[1] & oompcc <= input$pccrange[2] &
stdev == input$sizeselect)
runApp()
ggplot(overallgraph, aes(oompcc, omniP, color = N)) +
cleanup +
geom_point()
overallgraph = subset(overalleffects,
overallBF >= input$bfrange[1] & overallBF <= input$bfrange[2] &
omniP >= input$prange[1] & omniP <= input$prange[2] &
oompcc >= input$pccrange[1] & oompcc <= input$pccrange[2] &
stdev == input$sizeselect)
ggplot(overallgraph, aes(oompcc, omniP, color = N)) +
cleanup +
geom_point()
library(plotly)
cleanup = theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x = element_line(color = "black"),
axis.line.y = element_line(color = "black"),
legend.key = element_rect(fill = "white"),
text = element_text(size = 13))
ggplot(overallgraph, aes(oompcc, omniP, color = N)) +
cleanup +
geom_point()
ggplot(overallgraph, aes(oompcc, omniP, color = N)) +
cleanup +
geom_point() +
xlab("OOM PCC Value") +
ylab("Omnibus ANOVA p-Value")
overallgraph = subset(overalleffects,
#overallBF >= input$bfrange[1] & overallBF <= input$bfrange[2] &
omniP >= input$prange[1] & omniP <= input$prange[2] &
oompcc >= input$pccrange[1] & oompcc <= input$pccrange[2] &
stdev == input$sizeselect)
ggplot(overallgraph, aes(oompcc, omniP, color = N)) +
cleanup +
geom_point() +
xlab("OOM PCC Value") +
ylab("Omnibus ANOVA p-Value")
overallgraph2 = subset(overalleffects,
overallBF >= input$bfrange[1] & overallBF <= input$bfrange[2] &
#omniP >= input$prange[1] & omniP <= input$prange[2] &
oompcc >= input$pccrange[1] & oompcc <= input$pccrange[2] &
stdev == input$sizeselect)
ggplot(overallgraph2, aes(oompcc, overallBF, color = N)) +
cleanup +
geom_point() +
xlab("OOM PCC Value") +
ylab("Bayes Factor")
overallgraph3 = subset(overalleffects,
overallBF >= input$bfrange[1] & overallBF <= input$bfrange[2] &
omniP >= input$prange[1] & omniP <= input$prange[2] &
#oompcc >= input$pccrange[1] & oompcc <= input$pccrange[2] &
stdev == input$sizeselect)
ggplot(overallgraph3, aes(omniP, overallBF, color = N)) +
cleanup +
geom_point() +
xlab("Omnibus ANOVA p-Value") +
ylab("Bayes Factor")
runApp()
runApp()
runApp()
overalleffects$BF = log(overalleffects$BF)
max(overalleffects$BF)
is.infinite(overalleffects$BF)
overalleffects[is.finite(overalleffects$BF), ]
summary(overalleffects)
overalleffects[is.finite(overalleffects$BF), ]
is.finite(Inf)
is.finite(overalleffects$BF)
is.finite(c(1,3,5))
str(overalleffects$overallBF)
overalleffects$overallBF = log(overalleffects$overallBF)
summary(overalleffects$overallBF)
overalleffects[is.finite(overalleffects$overallBF), ]
overalleffects[is.infinite(overalleffects$overallBF), ]
nrows(overalleffects[is.infinite(overalleffects$overallBF), ])
nrow(overalleffects[is.infinite(overalleffects$overallBF), ])
overalleffects$overallBF[is.infinite(overalleffects$overallBF)]
unique(overalleffects$overallBF)
sort(unique(overalleffects$overallBF))
#make all infinite values the next largest
large = length(unique(overalleffects$overallBF))
large
#make all infinite values the next largest
large = length(unique(overalleffects$overallBF))[large]
#make all infinite values the next largest
large = length(unique(overalleffects$overallBF))
sort(unique(overalleffects$overallBF))[large]
sort(unique(overalleffects$overallBF))[large-1]
sort(unique(overalleffects$overallBF))[large-2]
e^sort(unique(overalleffects$overallBF))[large-2]
exp(sort(unique(overalleffects$overallBF))[large-2])
####load the data for comparison graphs####
overalleffects = read.csv("overall_sims_shiny.csv")
overalleffects$stdev = factor(overalleffects$stdev,
labels = c("Large", "Medium", "Small", "None"))
#make all infinite values the next largest
large = length(unique(overalleffects$overallBF))
overalleffects$overallBF[is.infinite(overalleffects$overallBF)] = sort(unique(overalleffects$overallBF))[large-1]
summary(overalleffects)
overalleffects$overallBF = log(overalleffects$overallBF)
summary(overallBF)
hist(overalleffects$overallBF)
runApp()
runApp()
runApp()
setwd("~/OneDrive - Missouri State University/RESEARCH/2 projects/Alt-NHST/paper")
master = read.csv("overall_sims.csv")
names(master)
with(master, tapply(effect1v2, stdev, mean))
